---

- name: Installing neovim formulas
  homebrew:
    name: "{{ neovim_formulas }}"
    state: present
  when: neovim_formulas | list

- name: Adding universal-tags tap
  homebrew_tap:
    name: universal-ctags/universal-ctags
    state: present

- name: Installing universal-ctags with json support
  homebrew:
    name: universal-ctags/universal-ctags/universal-ctags
    install_options: 'with-jansson,HEAD'

- name: Installing vim-plug
  git:
    repo: https://github.com/junegunn/vim-plug.git
    depth: "1"
    force: yes
    recursive: yes
    dest: "{{ ansible_env.HOME }}/.local/share/nvim/site/autoload"

- name: Installing neovim plugins
  shell: nvim +'silent PlugUpdate --sync' +'silent UpdateRemotePlugins --sync' +qa &> /dev/null < /dev/tty
  changed_when: false

- name: Installing neovim's node packages globally
  npm:
    name: "{{ item.name }}"
    version: "{{ item.version }}"
    global: yes
    state: latest
  with_items: "{{ neovim_node_packages }}"

- name: Checking Installed Python interpreters
  command: pyenv versions
  register: pyenv_versions
  changed_when: false
  when: "'pyenv' in neovim_formulas"

- name: Storing pyenv root
  command: pyenv root
  register: pyenv_root
  changed_when: false
  when: "'pyenv' in neovim_formulas"

- name: Installing Python interpreters for neovim
  command: pyenv install {{ item.version }}
  when: not (item.version in (pyenv_versions.stdout_lines | map('trim') | list))
  with_items: "{{ neovim_python }}"

- name: Creating neovim's Python virtualenvs
  command: pyenv virtualenv {{ item.version }} {{ item.venv }}
  when: not (item.venv in (pyenv_versions.stdout_lines | map('trim') | list))
  with_items: "{{ neovim_python }}"

- name: Installing Python neovim host clients
  pip:
    name:
      - pynvim
      - neovim
      - msgpack
    executable: "{{ pyenv_root.stdout }}/versions/{{ item.version }}/envs/{{ item.venv }}/bin/pip"
    state: latest
  with_items: "{{ neovim_python }}"

- name: Checking installed ruby interpreters
  command: rbenv versions
  register: ruby_versions
  changed_when: false
  when: neovim_ruby_version | string

- name: Installing Ruby interpreter for neovim
  command: rbenv install {{ neovim_ruby_version }}
  when: neovim_ruby_version and not (neovim_ruby_version in ruby_versions.stdout)

- name: Installing Ruby's neovim gems
  gem:
    name: "{{ item }}"
    state: latest
    user_install: no
    executable: "{{ ansible_env.HOME }}/.rbenv/versions/{{ neovim_ruby_version }}/bin/gem"
  environment:
    RBENV_VERSION: "{{ neovim_ruby_version }}"
  with_items:
    - neovim
    - solargraph
    - bundler

- name: Rehashing environments
  command: "{{ item }} rehash"
  with_items:
    - pyenv
    - rbenv
  changed_when: false
  when: neovim_ruby_version | string

- name: Updating neovim plugins
  shell: nvim +'silent PlugUpdate --sync' +'silent UpdateRemotePlugins --sync' +qa &> /dev/null < /dev/tty
  changed_when: false
  tags:
    - upgrade
